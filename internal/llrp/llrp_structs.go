//
// Copyright (C) 2020 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by "generate_param_code.py -i messages.yaml -s generated_structs.go -t binary_test.go -m generated_marshal.go -u generated_unmarshal.go -e generated_encoder.go"; DO NOT EDIT.

package llrp

// DecibelMilliwatt16 is a 16-bit dBm value. In LLRP, it's used for maximum receive
// sensitivity.
type DecibelMilliwatt16 = int16

// DecibelMilliwatt8 is a 8-bit dBm value. In LLRP, it's used to represent (received
// signal strength indicator) RSSI.
type DecibelMilliwatt8 = int8

// MillibelIsotropic is dBi*100, i.e., 0.01dBi (decibel relative isotropic). In LLRP, it's
// used to represent antenna gain values. It's scaled by 100 to allow accurate
// representation at sub-dBm precision.
type MillibelIsotropic = int16

// MillibelMilliwatt is dBm*100, i.e. 0.01dBm or 1 millibel milliwatt. In LLRP, it's used
// to represent transmit power values. It's scaled by 100 to allow accurate representation
// at sub-dBm precision.
type MillibelMilliwatt = int16

// Decibel is 1/10 of a bel, which is the either the log10 of the ratio of a power
// quantity relative a reference, or 2*log10 of the ratio of an amplitude quantity
// relative a reference field.
//
// In LLRP, it's used for receive sensitivity values relative the device maximum
// sensitivity. Although in general dBm values may be negative, LLRP restricts the
// ReceiveSensitivityTable's values to 0 to 128, though they require them to be
// transmitted using 16 bits.
type Decibel = uint16

// Microsecs64 is a 64-bit number of microseconds.
//
// It's usually used to represent a time offset since a known reference, Unix Epoch or the
// reader's start.
type Microsecs64 = uint64

// Millisecs32 is a 32-bit number of milliseconds.
//
// It's used to represent a time offset since a known reference, usually Unix Epoch or a
// message receipt time. Other times, it's used as a time period or timeout, in which case
// 0 may mean "never timeout".
type Millisecs32 = uint32

// Millisecs16 is a 16-bit number of milliseconds.
//
// It's used to represent a timeouts or duration triggers.
type Millisecs16 = uint16

// Nanosecs32 is a 32-bit number of nanoseconds used for some Tari values.
type Nanosecs32 = uint32

// Nanosecs16 is a 16-bit number of nanoseconds as used for some Tari values.
type Nanosecs16 = uint16

// Kilohertz measure frequency in 1000s of cycles per second.
type Kilohertz = uint32

// BitsPerSec are used to describe backscatter data rates.
type BitsPerSec = uint32

// C1G2MemoryBankType selection.
type C1G2MemoryBankType = uint8

// C1G2ProtoConEPCMemLength indicates number of (valid) EPC bits in the EPC Memory (bank
// 1) of a Gen2 tag.
type C1G2ProtoConEPCMemLength = uint8
type C1G2BlockPermalockResultType uint8

const (
	C1G2BPLockSuccess                = C1G2BlockPermalockResultType(0)
	C1G2BPLockInsufficientPower      = C1G2BlockPermalockResultType(1)
	C1G2BPLockNonSpecificTagError    = C1G2BlockPermalockResultType(2)
	C1G2BPLockNoResponseFromTag      = C1G2BlockPermalockResultType(3)
	C1G2BPLockNonSpecificReaderError = C1G2BlockPermalockResultType(4)
	C1G2BPLockIncorrectPassword      = C1G2BlockPermalockResultType(5)
	C1G2BPLockMemoryOverrun          = C1G2BlockPermalockResultType(6)
)

// AirProtocolIDType defines the air protocols LLRP supports for accessing tags.
//
// The air protocol determines how tags are sigulated and access operations performed,
// affects which parameters are permitted in certain contexts, and in theory can vary per
// antenna. In practice, however, there's only ever been a single one defined, and the
// standard hasn't been updated in ten years.
type AirProtocolIDType uint8

const (
	AirProtoUnspecified         = AirProtocolIDType(0)
	AirProtoEPCGlobalClass1Gen2 = AirProtocolIDType(1)
)

// CountryCodeType is an ISO-3166 country code.
type CountryCodeType uint16

const Unspecified = CountryCodeType(0)

// CommStandardType enumerates communication standards known to LLRP.
type CommStandardType uint16
type ROSpecCurrentStateType uint8

const (
	ROSpecStateDisabled = ROSpecCurrentStateType(0)
	ROSpecStateInactive = ROSpecCurrentStateType(1)
	ROSpecStateActive   = ROSpecCurrentStateType(2)
)

type AccessSpecStopTriggerType uint8

const (
	AccessSpecStopTriggerNone           = AccessSpecStopTriggerType(0)
	AccessSpecStopTriggerOperationCount = AccessSpecStopTriggerType(1)
)

type ReaderEventType uint16

const (
	NotifyChannelHop            = ReaderEventType(0)
	NotifyGPI                   = ReaderEventType(1)
	NotifyROSpec                = ReaderEventType(2)
	NotifyReportBuffFillWarn    = ReaderEventType(3)
	NotifyReaderException       = ReaderEventType(4)
	NotifyRFSurvey              = ReaderEventType(5)
	NotifyAISpec                = ReaderEventType(6)
	NotifyAISpecWithSingulation = ReaderEventType(7)
	NotifyAntenna               = ReaderEventType(8)
	NotifySpecLoop              = ReaderEventType(9)
)

type ROSpecEventType uint8

const (
	ROSpecStarted   = ROSpecEventType(0)
	ROSpecEnded     = ROSpecEventType(1)
	ROSpecPreempted = ROSpecEventType(2)
)

type AISpecEventType uint8

const AISpecEnded = AISpecEventType(0)

type RFSurveyEventType uint8

const (
	RFSurveyStarted = RFSurveyEventType(0)
	RFSurveyEnded   = RFSurveyEventType(1)
)

type AntennaEventType uint8

const (
	AntennaDisconnected = AntennaEventType(0)
	AntennaConnected    = AntennaEventType(1)
)

type AccessReportTriggerType uint8
type ROReportTriggerType uint8

const (
	None            = ROReportTriggerType(0)
	NTagsOrAIEnd    = ROReportTriggerType(1)
	NTagsOrROEnd    = ROReportTriggerType(2)
	NSecondsOrAIEnd = ROReportTriggerType(3)
	NSecondsOrROEnd = ROReportTriggerType(4)
	NMillisOrAIEnd  = ROReportTriggerType(5)
	NMillisOrROEnd  = ROReportTriggerType(6)
)

type ConnectionAttemptEventType uint16

const (
	ConnSuccess               = ConnectionAttemptEventType(0)
	ConnExistsReaderInitiated = ConnectionAttemptEventType(1)
	ConnExistsClientInitiated = ConnectionAttemptEventType(2)
	ConnFailedReasonUnknown   = ConnectionAttemptEventType(3)
	ConnAttemptedAgain        = ConnectionAttemptEventType(4)
)

type KeepAliveTriggerType uint8

const (
	KATriggerNone     = KeepAliveTriggerType(0)
	KATriggerPeriodic = KeepAliveTriggerType(1)
)

type ROSpecStartTriggerType uint8

const (
	ROStartTriggerNone      = ROSpecStartTriggerType(0)
	ROStartTriggerImmediate = ROSpecStartTriggerType(1)
	ROStartTriggerPeriodic  = ROSpecStartTriggerType(2)
	ROStartTriggerGPI       = ROSpecStartTriggerType(3)
)

type ROSpecStopTriggerType uint8

const (
	ROStopTriggerNone     = ROSpecStopTriggerType(0)
	ROStopTriggerDuration = ROSpecStopTriggerType(1)
	ROStopTriggerGPI      = ROSpecStopTriggerType(2)
)

type RFSurveySpecStopTriggerType uint8

const (
	RFSurveyStopTriggerNone       = RFSurveySpecStopTriggerType(0)
	RFSurveyStopTriggerDuration   = RFSurveySpecStopTriggerType(1)
	RFSurveyStopTriggerNIteration = RFSurveySpecStopTriggerType(2)
)

// AISpecStopTriggerType specifies when an Antenna Operation should terminate.
type AISpecStopTriggerType uint8

const (
	AIStopTriggerNone           = AISpecStopTriggerType(0)
	AIStopTriggerDuration       = AISpecStopTriggerType(1)
	AIStopTriggerGPI            = AISpecStopTriggerType(2)
	AIStopTriggerTagObservation = AISpecStopTriggerType(3)
)

type TagObservationTriggerType uint8

const (
	TagObsTriggerNTagObservations    = TagObservationTriggerType(0)
	TagObsTriggerNoNewAfterT         = TagObservationTriggerType(1)
	TagObsTriggerNAttempts           = TagObservationTriggerType(2)
	TagObsTriggerNUniqueObservations = TagObservationTriggerType(3)
	TagObsTriggerNoUniqueAfterT      = TagObservationTriggerType(4)
)

type SpectralMaskType uint8

const (
	SpectralMaskUnknown            = SpectralMaskType(0)
	SpectralMaskSingleInterrogator = SpectralMaskType(1)
	SpectralMaskMultiInterrogator  = SpectralMaskType(2)
	SpectralMaskDenseInterrogator  = SpectralMaskType(3)
)

type IDType uint8

const (
	ID_MAC_EUI64 = IDType(0)
	ID_EPC       = IDType(1)
)

// FwdLinkMod enumerates the RF carrier modulation options for a C1G2 Interrogator.
type FwdLinkMod uint8

const (
	DoubleSidebandASK = FwdLinkMod(0)
	SingleSidebandASK = FwdLinkMod(1)
	PhaseReversalASK  = FwdLinkMod(2)
)

// BackscatterMod enumerates the C1G2 sub-carrier modulation types.
type BackscatterMod uint8

const (
	FM0     = BackscatterMod(0)
	Miller2 = BackscatterMod(1)
	Miller4 = BackscatterMod(2)
	Miller8 = BackscatterMod(3)
)

// DivideRatio is used by a tag to determine BLF in C1G2. See UHFC1G2RFModeTable.
type DivideRatio uint8

const (
	DREightToOne       = DivideRatio(0)
	DRSixtyFourToThree = DivideRatio(1)
)

type GPIStateType uint8

const (
	GPIStateLow     = GPIStateType(0)
	GPIStateHigh    = GPIStateType(1)
	GPIStateUnknown = GPIStateType(2)
)

type LockPrivilegeType uint8

const (
	LockPrivRW          = LockPrivilegeType(0)
	LockPrivPermalock   = LockPrivilegeType(1)
	LockPrivPermaunlock = LockPrivilegeType(2)
	LockPrivUnlock      = LockPrivilegeType(3)
)

type LockDataType uint8

const (
	LockDataKillPwd    = LockDataType(0)
	LockDataAccessPwd  = LockDataType(1)
	LockDataEPCMemory  = LockDataType(2)
	LockDataTIDMemory  = LockDataType(3)
	LockDataUserMemory = LockDataType(4)
)

// MessageType corresponds to the LLRP binary encoding for message headers.
type MessageType uint16

// ParamType is an 8 or 10 bit value identifying both the encoding and content of an LLRP
// Parameter.
type ParamType uint16

// VersionNum corresponds to an LLRP version number.
//
// The version number is 3 bits and embedded in each message sent between a Reader and
// Client.
//
// By default, this package will attempt to establish connection with Readers using the
// higher version it knows, but you can explicitly override it when creating a connection.
// In either case, for versions greater than 1.0.1, the Client will negotiate versions
// with the Reader and downgrade if necessary.
type VersionNum uint8

const (
	versionUnknown = VersionNum(0)
	Version1_0_1   = VersionNum(1)
	Version1_1     = VersionNum(2)
)

// StatusCode matches LLRP's Status Codes.
//
// These are described in Section 14 of the Low Level Reader Protocol v1.0.1 and in
// Section 15 of Low Level Reader Protocol v1.1.
type StatusCode uint16

const (
	StatusSuccess               = StatusCode(0)
	StatusMsgParamError         = StatusCode(100)
	StatusMsgFieldError         = StatusCode(101)
	StatusMsgParamUnexpected    = StatusCode(102)
	StatusMsgParamMissing       = StatusCode(103)
	StatusMsgParamDuplicate     = StatusCode(104)
	StatusMsgParamOverflow      = StatusCode(105)
	StatusMsgFieldOverflow      = StatusCode(106)
	StatusMsgParamUnknown       = StatusCode(107)
	StatusMsgFieldUnknown       = StatusCode(108)
	StatusMsgMsgUnsupported     = StatusCode(109)
	StatusMsgVerUnsupported     = StatusCode(110)
	StatusMsgParamUnsupported   = StatusCode(111)
	StatusMsgMsgUnexpected      = StatusCode(112)
	StatusParamParamError       = StatusCode(200)
	StatusParamFieldError       = StatusCode(201)
	StatusParamParamUnexpected  = StatusCode(202)
	StatusParamParamMissing     = StatusCode(203)
	StatusParamParamDuplicate   = StatusCode(204)
	StatusParamParamOverflow    = StatusCode(205)
	StatusParamFieldOverflow    = StatusCode(206)
	StatusParamParamUnknown     = StatusCode(207)
	StatusParamFieldUnknown     = StatusCode(208)
	StatusParamParamUnsupported = StatusCode(209)
	StatusFieldInvalid          = StatusCode(300)
	StatusFieldOutOfRange       = StatusCode(301)
	StatusDeviceError           = StatusCode(401)
)

type ReaderCapability uint8

const (
	ReaderCapAll                         = ReaderCapability(0)
	ReaderCapGeneralDeviceCapabilities   = ReaderCapability(1)
	ReaderCapLLRPCapabilities            = ReaderCapability(2)
	ReaderCapRegulatoryCapabilities      = ReaderCapability(3)
	ReaderCapAirProtocolLLRPCapabilities = ReaderCapability(4)
)

type ReaderConfigRequestedDataType uint8

const (
	ReaderConfReqAll                  = ReaderConfigRequestedDataType(0)
	ReaderConfReqIdentification       = ReaderConfigRequestedDataType(1)
	ReaderConfReqAntennaProperties    = ReaderConfigRequestedDataType(2)
	ReaderConfReqAntennaConfig        = ReaderConfigRequestedDataType(3)
	ReaderConfReqROReportSpec         = ReaderConfigRequestedDataType(4)
	ReaderConfReqReaderEventNotifSpec = ReaderConfigRequestedDataType(5)
	ReaderConfReqAccessReportSpec     = ReaderConfigRequestedDataType(6)
	ReaderConfReqLLRPConfStateVal     = ReaderConfigRequestedDataType(7)
	ReaderConfReqKeepAliveSpec        = ReaderConfigRequestedDataType(8)
	ReaderConfReqGPIPortCurState      = ReaderConfigRequestedDataType(9)
	ReaderConfReqGPOWriteData         = ReaderConfigRequestedDataType(10)
	ReaderConfReqEventsAndReports     = ReaderConfigRequestedDataType(11)
)

type C1G2BlockEraseResultType uint8
type C1G2GetBlockPermalockStatusResultType uint8
type C1G2BlockWriteResultType uint8
type C1G2KillResultType uint8
type C1G2LockResultType uint8
type C1G2RecommissionResultType uint8
type C1G2WriteOpSpecResultType uint8
type C1G2ReadOpSpecResultType uint8
type C1G2TagInventoryTargetType uint8

const (
	InvTargetSL            = C1G2TagInventoryTargetType(0)
	InvTargetInventoriedS0 = C1G2TagInventoryTargetType(1)
	InvTargetInventoriedS1 = C1G2TagInventoryTargetType(2)
	InvTargetInventoriedS2 = C1G2TagInventoryTargetType(3)
	InvTargetInventoriedS3 = C1G2TagInventoryTargetType(4)
)

type C1G2FilterTruncateActionType uint8

const (
	FilterActionUnspecified   = C1G2FilterTruncateActionType(0)
	FilterActionDoNotTruncate = C1G2FilterTruncateActionType(1)
	FilterActionTruncate      = C1G2FilterTruncateActionType(2)
)

type C1G2TagInventoryStateAwareFilterActionType uint8

const (
	AwareSelectMSetUClear  = C1G2TagInventoryStateAwareFilterActionType(0)
	AwareSelectMSetUKeep   = C1G2TagInventoryStateAwareFilterActionType(1)
	AwareSelectMKeepUClear = C1G2TagInventoryStateAwareFilterActionType(2)
	AwareSelectMFlipUKeep  = C1G2TagInventoryStateAwareFilterActionType(3)
	AwareSelectMClearUSet  = C1G2TagInventoryStateAwareFilterActionType(4)
	AwareSelectMClearUKeep = C1G2TagInventoryStateAwareFilterActionType(5)
	AwareSelectMKeepUSet   = C1G2TagInventoryStateAwareFilterActionType(6)
	AwareSelectMKeepUFlip  = C1G2TagInventoryStateAwareFilterActionType(7)
)

type SessionState uint8

const (
	SessionStateA = SessionState(0)
	SessionStateB = SessionState(1)
)

type SLState uint8

const (
	SLStateAsserted   = SLState(0)
	SLStateDeasserted = SLState(1)
)

type C1G2TagInventoryStateUnawareFilterActionType uint8

const (
	UnawareSelectMSetUClear  = C1G2TagInventoryStateUnawareFilterActionType(0)
	UnawareSelectMSetUKeep   = C1G2TagInventoryStateUnawareFilterActionType(1)
	UnawareSelectMKeepUClear = C1G2TagInventoryStateUnawareFilterActionType(2)
	UnawareSelectMClearUSet  = C1G2TagInventoryStateUnawareFilterActionType(3)
	UnawareSelectMClearUKeep = C1G2TagInventoryStateUnawareFilterActionType(4)
	UnawareSelectMKeepUSet   = C1G2TagInventoryStateUnawareFilterActionType(5)
)

type C1G2SingulationSession = uint8
type C1G2RecommissionFlags uint8

const (
	MsgGetSupportedVersion           = MessageType(46)
	MsgGetSupportedVersionResponse   = MessageType(56)
	MsgSetProtocolVersion            = MessageType(47)
	MsgSetProtocolVersionResponse    = MessageType(57)
	MsgGetReaderCapabilities         = MessageType(1)
	MsgGetReaderCapabilitiesResponse = MessageType(11)
	MsgAddROSpec                     = MessageType(20)
	MsgAddROSpecResponse             = MessageType(30)
	MsgDeleteROSpec                  = MessageType(21)
	MsgDeleteROSpecResponse          = MessageType(31)
	MsgStartROSpec                   = MessageType(22)
	MsgStartROSpecResponse           = MessageType(32)
	MsgStopROSpec                    = MessageType(23)
	MsgStopROSpecResponse            = MessageType(33)
	MsgEnableROSpec                  = MessageType(24)
	MsgEnableROSpecResponse          = MessageType(34)
	MsgDisableROSpec                 = MessageType(25)
	MsgDisableROSpecResponse         = MessageType(35)
	MsgGetROSpecs                    = MessageType(26)
	MsgGetROSpecsResponse            = MessageType(36)
	MsgAddAccessSpec                 = MessageType(40)
	MsgAddAccessSpecResponse         = MessageType(50)
	MsgDeleteAccessSpec              = MessageType(41)
	MsgDeleteAccessSpecResponse      = MessageType(51)
	MsgEnableAccessSpec              = MessageType(42)
	MsgEnableAccessSpecResponse      = MessageType(52)
	MsgDisableAccessSpec             = MessageType(43)
	MsgDisableAccessSpecResponse     = MessageType(53)
	MsgGetAccessSpecs                = MessageType(44)
	MsgGetAccessSpecsResponse        = MessageType(54)
	MsgClientRequestOp               = MessageType(45)
	MsgClientRequestOpResponse       = MessageType(55)
	MsgGetReport                     = MessageType(60)
	MsgROAccessReport                = MessageType(61)
	MsgKeepAlive                     = MessageType(62)
	MsgKeepAliveAck                  = MessageType(72)
	MsgReaderEventNotification       = MessageType(63)
	MsgEnableEventsAndReports        = MessageType(64)
	MsgErrorMessage                  = MessageType(100)
	MsgGetReaderConfig               = MessageType(2)
	MsgGetReaderConfigResponse       = MessageType(12)
	MsgSetReaderConfig               = MessageType(3)
	MsgSetReaderConfigResponse       = MessageType(13)
	MsgCloseConnection               = MessageType(14)
	MsgCloseConnectionResponse       = MessageType(4)
	MsgCustomMessage                 = MessageType(1023)
)

// GetSupportedVersion is Message 46, GetSupportedVersion.
type GetSupportedVersion struct{}

// Type returns this message's MessageType
func (*GetSupportedVersion) Type() MessageType {
	return MsgGetSupportedVersion
}

// GetSupportedVersionResponse is Message 56, GetSupportedVersionResponse.
type GetSupportedVersionResponse struct {
	CurrentVersion      VersionNum
	MaxSupportedVersion VersionNum
	LLRPStatus          LLRPStatus
}

// Type returns this message's MessageType
func (*GetSupportedVersionResponse) Type() MessageType {
	return MsgGetSupportedVersionResponse
}

// Status returns this message's LLRPStatus
func (m *GetSupportedVersionResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// SetProtocolVersion is Message 47, SetProtocolVersion.
type SetProtocolVersion struct {
	TargetVersion VersionNum
}

// Type returns this message's MessageType
func (*SetProtocolVersion) Type() MessageType {
	return MsgSetProtocolVersion
}

// SetProtocolVersionResponse is Message 57, SetProtocolVersionResponse.
type SetProtocolVersionResponse struct {
	LLRPStatus LLRPStatus
}

// Type returns this message's MessageType
func (*SetProtocolVersionResponse) Type() MessageType {
	return MsgSetProtocolVersionResponse
}

// Status returns this message's LLRPStatus
func (m *SetProtocolVersionResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// GetReaderCapabilities is Message 1, GetReaderCapabilities.
type GetReaderCapabilities struct {
	ReaderCapabilitiesRequestedData ReaderCapability
	Custom                          []Custom
}

// Type returns this message's MessageType
func (*GetReaderCapabilities) Type() MessageType {
	return MsgGetReaderCapabilities
}

// GetReaderCapabilitiesResponse is Message 11, GetReaderCapabilitiesResponse.
type GetReaderCapabilitiesResponse struct {
	LLRPStatus                LLRPStatus
	GeneralDeviceCapabilities *GeneralDeviceCapabilities
	LLRPCapabilities          *LLRPCapabilities
	RegulatoryCapabilities    *RegulatoryCapabilities
	C1G2LLRPCapabilities      *C1G2LLRPCapabilities
	Custom                    []Custom
}

// Type returns this message's MessageType
func (*GetReaderCapabilitiesResponse) Type() MessageType {
	return MsgGetReaderCapabilitiesResponse
}

// Status returns this message's LLRPStatus
func (m *GetReaderCapabilitiesResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// AddROSpec is Message 20, AddROSpec.
//
// AddROSpec adds an Reader Operation Specification.
//
// ROSpecs must be added in the Disabled state, and it's up to the client to set the
// ROSpecID. That ID is used to reference the spec in other messages.
type AddROSpec struct {
	ROSpec ROSpec
}

// Type returns this message's MessageType
func (*AddROSpec) Type() MessageType {
	return MsgAddROSpec
}

// AddROSpecResponse is Message 30, AddROSpecResponse.
type AddROSpecResponse struct {
	LLRPStatus LLRPStatus
}

// Type returns this message's MessageType
func (*AddROSpecResponse) Type() MessageType {
	return MsgAddROSpecResponse
}

// Status returns this message's LLRPStatus
func (m *AddROSpecResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// DeleteROSpec is Message 21, DeleteROSpec.
type DeleteROSpec struct {
	ROSpecID uint32
}

// Type returns this message's MessageType
func (*DeleteROSpec) Type() MessageType {
	return MsgDeleteROSpec
}

// DeleteROSpecResponse is Message 31, DeleteROSpecResponse.
type DeleteROSpecResponse struct {
	LLRPStatus LLRPStatus
}

// Type returns this message's MessageType
func (*DeleteROSpecResponse) Type() MessageType {
	return MsgDeleteROSpecResponse
}

// Status returns this message's LLRPStatus
func (m *DeleteROSpecResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// StartROSpec is Message 22, StartROSpec.
type StartROSpec struct {
	ROSpecID uint32
}

// Type returns this message's MessageType
func (*StartROSpec) Type() MessageType {
	return MsgStartROSpec
}

// StartROSpecResponse is Message 32, StartROSpecResponse.
type StartROSpecResponse struct {
	LLRPStatus LLRPStatus
}

// Type returns this message's MessageType
func (*StartROSpecResponse) Type() MessageType {
	return MsgStartROSpecResponse
}

// Status returns this message's LLRPStatus
func (m *StartROSpecResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// StopROSpec is Message 23, StopROSpec.
//
// StopROSpec stops a spec if it's currently executing, overriding all other priorities
// and moving it to Inactive.
type StopROSpec struct {
	ROSpecID uint32
}

// Type returns this message's MessageType
func (*StopROSpec) Type() MessageType {
	return MsgStopROSpec
}

// StopROSpecResponse is Message 33, StopROSpecResponse.
type StopROSpecResponse struct {
	LLRPStatus LLRPStatus
}

// Type returns this message's MessageType
func (*StopROSpecResponse) Type() MessageType {
	return MsgStopROSpecResponse
}

// Status returns this message's LLRPStatus
func (m *StopROSpecResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// EnableROSpec is Message 24, EnableROSpec.
//
// EnableROSpec moves and ROSpec from Disabled to Inactive.
//
// The SpecID may be 0, in which case all ROSpecs will be enabled. If the ROSpec has an
// Immediate start trigger, enabling it will also activate it, provided no other necessary
// prevent it from starting (e.g., its priority is lower than another enabled spec).
type EnableROSpec struct {
	ROSpecID uint32
}

// Type returns this message's MessageType
func (*EnableROSpec) Type() MessageType {
	return MsgEnableROSpec
}

// EnableROSpecResponse is Message 34, EnableROSpecResponse.
type EnableROSpecResponse struct {
	LLRPStatus LLRPStatus
}

// Type returns this message's MessageType
func (*EnableROSpecResponse) Type() MessageType {
	return MsgEnableROSpecResponse
}

// Status returns this message's LLRPStatus
func (m *EnableROSpecResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// DisableROSpec is Message 25, DisableROSpec.
type DisableROSpec struct {
	ROSpecID uint32
}

// Type returns this message's MessageType
func (*DisableROSpec) Type() MessageType {
	return MsgDisableROSpec
}

// DisableROSpecResponse is Message 35, DisableROSpecResponse.
type DisableROSpecResponse struct {
	LLRPStatus LLRPStatus
}

// Type returns this message's MessageType
func (*DisableROSpecResponse) Type() MessageType {
	return MsgDisableROSpecResponse
}

// Status returns this message's LLRPStatus
func (m *DisableROSpecResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// GetROSpecs is Message 26, GetROSpecs.
type GetROSpecs struct{}

// Type returns this message's MessageType
func (*GetROSpecs) Type() MessageType {
	return MsgGetROSpecs
}

// GetROSpecsResponse is Message 36, GetROSpecsResponse.
type GetROSpecsResponse struct {
	LLRPStatus LLRPStatus
	ROSpecs    []ROSpec
}

// Type returns this message's MessageType
func (*GetROSpecsResponse) Type() MessageType {
	return MsgGetROSpecsResponse
}

// Status returns this message's LLRPStatus
func (m *GetROSpecsResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// AddAccessSpec is Message 40, AddAccessSpec.
type AddAccessSpec struct {
	AccessSpec AccessSpec
}

// Type returns this message's MessageType
func (*AddAccessSpec) Type() MessageType {
	return MsgAddAccessSpec
}

// AddAccessSpecResponse is Message 50, AddAccessSpecResponse.
type AddAccessSpecResponse struct {
	LLRPStatus LLRPStatus
}

// Type returns this message's MessageType
func (*AddAccessSpecResponse) Type() MessageType {
	return MsgAddAccessSpecResponse
}

// Status returns this message's LLRPStatus
func (m *AddAccessSpecResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// DeleteAccessSpec is Message 41, DeleteAccessSpec.
type DeleteAccessSpec struct {
	AccessSpecID uint32
}

// Type returns this message's MessageType
func (*DeleteAccessSpec) Type() MessageType {
	return MsgDeleteAccessSpec
}

// DeleteAccessSpecResponse is Message 51, DeleteAccessSpecResponse.
type DeleteAccessSpecResponse struct {
	LLRPStatus LLRPStatus
}

// Type returns this message's MessageType
func (*DeleteAccessSpecResponse) Type() MessageType {
	return MsgDeleteAccessSpecResponse
}

// Status returns this message's LLRPStatus
func (m *DeleteAccessSpecResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// EnableAccessSpec is Message 42, EnableAccessSpec.
type EnableAccessSpec struct {
	AccessSpecID uint32
}

// Type returns this message's MessageType
func (*EnableAccessSpec) Type() MessageType {
	return MsgEnableAccessSpec
}

// EnableAccessSpecResponse is Message 52, EnableAccessSpecResponse.
type EnableAccessSpecResponse struct {
	LLRPStatus LLRPStatus
}

// Type returns this message's MessageType
func (*EnableAccessSpecResponse) Type() MessageType {
	return MsgEnableAccessSpecResponse
}

// Status returns this message's LLRPStatus
func (m *EnableAccessSpecResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// DisableAccessSpec is Message 43, DisableAccessSpec.
type DisableAccessSpec struct {
	AccessSpecID uint32
}

// Type returns this message's MessageType
func (*DisableAccessSpec) Type() MessageType {
	return MsgDisableAccessSpec
}

// DisableAccessSpecResponse is Message 53, DisableAccessSpecResponse.
type DisableAccessSpecResponse struct {
	LLRPStatus LLRPStatus
}

// Type returns this message's MessageType
func (*DisableAccessSpecResponse) Type() MessageType {
	return MsgDisableAccessSpecResponse
}

// Status returns this message's LLRPStatus
func (m *DisableAccessSpecResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// GetAccessSpecs is Message 44, GetAccessSpecs.
type GetAccessSpecs struct{}

// Type returns this message's MessageType
func (*GetAccessSpecs) Type() MessageType {
	return MsgGetAccessSpecs
}

// GetAccessSpecsResponse is Message 54, GetAccessSpecsResponse.
type GetAccessSpecsResponse struct {
	LLRPStatus  LLRPStatus
	AccessSpecs []AccessSpec
}

// Type returns this message's MessageType
func (*GetAccessSpecsResponse) Type() MessageType {
	return MsgGetAccessSpecsResponse
}

// Status returns this message's LLRPStatus
func (m *GetAccessSpecsResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// ClientRequestOp is Message 45, ClientRequestOp.
type ClientRequestOp struct {
	TagReportData TagReportData
}

// Type returns this message's MessageType
func (*ClientRequestOp) Type() MessageType {
	return MsgClientRequestOp
}

// ClientRequestOpResponse is Message 55, ClientRequestOpResponse.
type ClientRequestOpResponse struct {
	ClientRequestResponse ClientRequestResponse
}

// Type returns this message's MessageType
func (*ClientRequestOpResponse) Type() MessageType {
	return MsgClientRequestOpResponse
}

// GetReport is Message 60, GetReport.
type GetReport struct{}

// Type returns this message's MessageType
func (*GetReport) Type() MessageType {
	return MsgGetReport
}

// ROAccessReport is Message 61, ROAccessReport.
type ROAccessReport struct {
	TagReportData      []TagReportData
	RFSurveyReportData []RFSurveyReportData
	Custom             []Custom
}

// Type returns this message's MessageType
func (*ROAccessReport) Type() MessageType {
	return MsgROAccessReport
}

// KeepAlive is Message 62, KeepAlive.
type KeepAlive struct{}

// Type returns this message's MessageType
func (*KeepAlive) Type() MessageType {
	return MsgKeepAlive
}

// KeepAliveAck is Message 72, KeepAliveAck.
type KeepAliveAck struct{}

// Type returns this message's MessageType
func (*KeepAliveAck) Type() MessageType {
	return MsgKeepAliveAck
}

// ReaderEventNotification is Message 63, ReaderEventNotification.
type ReaderEventNotification struct {
	ReaderEventNotificationData ReaderEventNotificationData
}

// Type returns this message's MessageType
func (*ReaderEventNotification) Type() MessageType {
	return MsgReaderEventNotification
}

// EnableEventsAndReports is Message 64, EnableEventsAndReports.
type EnableEventsAndReports struct{}

// Type returns this message's MessageType
func (*EnableEventsAndReports) Type() MessageType {
	return MsgEnableEventsAndReports
}

// ErrorMessage is Message 100, ErrorMessage.
type ErrorMessage struct {
	LLRPStatus LLRPStatus
}

// Type returns this message's MessageType
func (*ErrorMessage) Type() MessageType {
	return MsgErrorMessage
}

// Status returns this message's LLRPStatus
func (m *ErrorMessage) Status() LLRPStatus {
	return m.LLRPStatus
}

// GetReaderConfig is Message 2, GetReaderConfig.
type GetReaderConfig struct {
	AntennaID     AntennaID
	RequestedData ReaderConfigRequestedDataType
	GPIPortNum    uint16
	GPOPortNum    uint16
	Custom        []Custom
}

// Type returns this message's MessageType
func (*GetReaderConfig) Type() MessageType {
	return MsgGetReaderConfig
}

// GetReaderConfigResponse is Message 12, GetReaderConfigResponse.
type GetReaderConfigResponse struct {
	LLRPStatus                  LLRPStatus
	Identification              *Identification
	AntennaProperties           []AntennaProperties
	AntennaConfigurations       []AntennaConfiguration
	ReaderEventNotificationSpec *ReaderEventNotificationSpec
	ROReportSpec                *ROReportSpec
	AccessReportSpec            *AccessReportSpec
	LLRPConfigurationStateValue *LLRPConfigurationStateValue
	KeepAliveSpec               *KeepAliveSpec
	GPIPortCurrentStates        []GPIPortCurrentState
	GPOWriteData                []GPOWriteData
	EventsAndReports            *EventsAndReports
	Custom                      []Custom
}

// Type returns this message's MessageType
func (*GetReaderConfigResponse) Type() MessageType {
	return MsgGetReaderConfigResponse
}

// Status returns this message's LLRPStatus
func (m *GetReaderConfigResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// SetReaderConfig is Message 3, SetReaderConfig.
type SetReaderConfig struct {
	ResetToFactoryDefaults      bool
	ReaderEventNotificationSpec *ReaderEventNotificationSpec
	AntennaProperties           []AntennaProperties
	AntennaConfigurations       []AntennaConfiguration
	ROReportSpec                *ROReportSpec
	AccessReportSpec            *AccessReportSpec
	KeepAliveSpec               *KeepAliveSpec
	GPOWriteData                []GPOWriteData
	GPIPortCurrentStates        []GPIPortCurrentState
	EventsAndReports            *EventsAndReports
	Custom                      []Custom
}

// Type returns this message's MessageType
func (*SetReaderConfig) Type() MessageType {
	return MsgSetReaderConfig
}

// SetReaderConfigResponse is Message 13, SetReaderConfigResponse.
type SetReaderConfigResponse struct {
	LLRPStatus LLRPStatus
}

// Type returns this message's MessageType
func (*SetReaderConfigResponse) Type() MessageType {
	return MsgSetReaderConfigResponse
}

// Status returns this message's LLRPStatus
func (m *SetReaderConfigResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// CloseConnection is Message 14, CloseConnection.
type CloseConnection struct{}

// Type returns this message's MessageType
func (*CloseConnection) Type() MessageType {
	return MsgCloseConnection
}

// CloseConnectionResponse is Message 4, CloseConnectionResponse.
type CloseConnectionResponse struct {
	LLRPStatus LLRPStatus
}

// Type returns this message's MessageType
func (*CloseConnectionResponse) Type() MessageType {
	return MsgCloseConnectionResponse
}

// Status returns this message's LLRPStatus
func (m *CloseConnectionResponse) Status() LLRPStatus {
	return m.LLRPStatus
}

// CustomMessage is Message 1023, CustomMessage.
type CustomMessage struct {
	VendorID       uint32
	MessageSubtype uint8
	Data           []byte
}

// Type returns this message's MessageType
func (*CustomMessage) Type() MessageType {
	return MsgCustomMessage
}

// AntennaID is Parameter 1, AntennaID.
type AntennaID uint16

// FirstSeenUTC is Parameter 2, FirstSeenUTC.
type FirstSeenUTC Microsecs64

// FirstSeenUptime is Parameter 3, FirstSeenUptime.
type FirstSeenUptime Microsecs64

// LastSeenUTC is Parameter 4, LastSeenUTC.
type LastSeenUTC Microsecs64

// LastSeenUptime is Parameter 5, LastSeenUptime.
type LastSeenUptime Microsecs64

// PeakRSSI is Parameter 6, PeakRSSI.
type PeakRSSI DecibelMilliwatt8

// ChannelIndex is Parameter 7, ChannelIndex.
type ChannelIndex uint16

// TagSeenCount is Parameter 8, TagSeenCount.
type TagSeenCount uint16

// ROSpecID is Parameter 9, ROSpecID.
type ROSpecID uint32

// InventoryParameterSpecID is Parameter 10, InventoryParameterSpecID.
type InventoryParameterSpecID uint16

// C1G2CRC is Parameter 11, C1G2CRC.
type C1G2CRC uint16

// C1G2PC is Parameter 12, C1G2PC.
//
// This is the 16-bit Protocol Control field of the EPC Memory (bank 1). It indicates the
// number of EPC bits a tag returns to a reader, (regardless of the physical memory bank
// size), whether or not the tag has user memory (and contains data), whether or not an
// XPC is present, and whether the EPC memory bank contains a binary encoded EPC or an ISO
// Unique Item Identifier.
type C1G2PC struct {
	EPCMemoryLength C1G2ProtoConEPCMemLength
	HasUserMemory   bool
	// HasXPC is true if the Extended Protocol Control Word 1 exists (word 21 of EPC Memory).
	HasXPC bool
	// IsISO15961 is true if the final 8 bits of the PC are an ISO Application Family
	// Identifier (AFI), as defined in ISO15961. If so, the remainder of the EPC bank
	// contains a Unique Item Identifier (UII) appropriate for that AFI. If false, the final
	// 8 bits of the PC are (or may be) Attribute Bits (applies to Gen2 v1.x tags only), and
	// the remainder of the EPC memory bank is a binary encoded EPC.
	IsISO15961 bool
	// AttributesOrAFI is either the EPC C1G2 Attributes bits, or an ISO15961 AFI, depending
	// on the whether IsISO15961 is true.
	AttributesOrAFI byte
}

// EPC96 is Parameter 13, EPC96.
type EPC96 struct {
	EPC []byte
}

// SpecIndex is Parameter 14, SpecIndex.
type SpecIndex uint16

// ClientRequestOpSpecResult is Parameter 15, ClientRequestOpSpecResult.
type ClientRequestOpSpecResult uint16

// AccessSpecID is Parameter 16, AccessSpecID.
type AccessSpecID uint32

// OpSpecID is Parameter 17, OpSpecID.
type OpSpecID uint16

// C1G2SingulationDetails is Parameter 18, C1G2SingulationDetails.
type C1G2SingulationDetails struct {
	NumCollisionSlots uint16
	NumEmptySlots     uint16
}

// C1G2XPCW1 is Parameter 19, C1G2XPCW1.
type C1G2XPCW1 uint16

// C1G2XPCW2 is Parameter 20, C1G2XPCW2.
type C1G2XPCW2 uint16

// UTCTimestamp is Parameter 128, UTCTimestamp.
//
// Microseconds since the beginning of time, midnight 1970-Jan-1.
type UTCTimestamp Microsecs64

// Uptime is Parameter 129, Uptime.
//
// Microseconds since the Reader started.
type Uptime Microsecs64

// GeneralDeviceCapabilities is Parameter 137, GeneralDeviceCapabilities.
//
// This parameter specifies what the Reader supports, primarily with respect to antenna
// control. It also gives some identifying information about the device make, model, and
// firmware.
//
// Some LLRP messages permit either a UTC timestamp or Uptime parameter. If HasUTCClock is
// false, the Reader uses Uptime, and reports the number of microseconds since it powered
// on. If it has a UTC clock, then it reports its timestamps as microseconds since the
// beginning of time (1970-Jan-01, midnight).
//
// The most common messages carry a timestamp, so they'll have one or the other of UTC or
// Uptime, but not both. In most cases, this package use pointer struct fields for 0..1
// parameters, allowing nil to signal that the parameter isn't present. For reasons
// related to implementation simplicity and performance, both UTC and Uptime are presented
// as non-pointer struct fields. During unmarshaling, it'll set the correct value and
// leave the other 0 (or report an error if both are present or both are missing). During
// marshaling, if both are set, it will only marshal the UTC value.
//
// If a Reader doesn't support controlling receive sensitivity, it returns a single table
// entry with the value 0. If it supports multiple antennas each with unique
// sensitivities, the table contains an entry for the union of all possible sensitivities,
// and the PerAntennaReceiveSensitivityRanges maps antenna IDs to ranges of indices into
// this table.
type GeneralDeviceCapabilities struct {
	MaxSupportedAntennas    uint16
	CanSetAntennaProperties bool
	HasUTCClock             bool
	// DeviceManufacturer is an IANA Private Enterprise Number (PEN).
	DeviceManufacturer                 uint32
	Model                              uint32
	FirmwareVersion                    string
	ReceiveSensitivities               []ReceiveSensitivityTableEntry
	PerAntennaReceiveSensitivityRanges []PerAntennaReceiveSensitivityRange
	GPIOCapabilities                   GPIOCapabilities
	PerAntennaAirProtocols             []PerAntennaAirProtocol
	MaximumReceiveSensitivity          *MaximumReceiveSensitivity
}

// ReceiveSensitivityTableEntry is Parameter 139, ReceiveSensitivityTableEntry.
type ReceiveSensitivityTableEntry struct {
	Index uint16
	// ReceiveSensitivity is relative the maximum supported by the device, or the maximum
	// reported in the device capabilities, for readers that support changing it (requires
	// LLRP v1.1+).
	ReceiveSensitivity Decibel
}

// PerAntennaAirProtocol is Parameter 140, PerAntennaAirProtocol.
type PerAntennaAirProtocol struct {
	AntennaID      AntennaID
	AirProtocolIDs []AirProtocolIDType
}

// GPIOCapabilities is Parameter 141, GPIOCapabilities.
type GPIOCapabilities struct {
	NumGPIs uint16
	NumGPOs uint16
}

// LLRPCapabilities is Parameter 142, LLRPCapabilities.
type LLRPCapabilities struct {
	CanDoRFSurvey                          bool
	CanReportBufferFillWarning             bool
	SupportsClientRequestOpSpec            bool
	CanDoTagInventoryStateAwareSingulation bool
	SupportsEventsAndReportHolding         bool
	MaxPriorityLevelSupported              uint8
	ClientRequestedOpSpecTimeout           uint16
	MaxROSpecs                             uint32
	MaxSpecsPerROSpec                      uint32
	MaxInventoryParameterSpecsPerAISpec    uint32
	MaxAccessSpecs                         uint32
	MaxOpSpecsPerAccessSpec                uint32
}

// RegulatoryCapabilities is Parameter 143, RegulatoryCapabilities.
type RegulatoryCapabilities struct {
	CountryCode            CountryCodeType
	CommunicationsStandard uint16
	UHFBandCapabilities    *UHFBandCapabilities
	Custom                 []Custom
}

// UHFBandCapabilities is Parameter 144, UHFBandCapabilities.
type UHFBandCapabilities struct {
	TransmitPowerLevels           []TransmitPowerLevelTableEntry
	FrequencyInformation          FrequencyInformation
	C1G2RFModes                   UHFC1G2RFModeTable
	RFSurveyFrequencyCapabilities *RFSurveyFrequencyCapabilities
}

// TransmitPowerLevelTableEntry is Parameter 145, TransmitPowerLevelTableEntry.
type TransmitPowerLevelTableEntry struct {
	Index              uint16
	TransmitPowerValue MillibelMilliwatt
}

// FrequencyInformation is Parameter 146, FrequencyInformation.
//
// In hopping regulatory regions, Hopping is true, and the Reader will send zero or more
// FrequencyHopTables, each with a HopTableID and list of frequencies. In fixed frequency
// regulatory regions, Hopping is false, and the Reader sends a fixed frequency table
// instead.
//
// In both cases, the "table" is just a list of available frequencies. The "ChannelIndex"
// is a frequency's 1-based offset in its list, so ChannelIndex 1 is Frequencies[0]. Other
// parameters will reference these values using a ChannelIndex, as well as the HopTableID
// if Hopping is true.
type FrequencyInformation struct {
	Hopping             bool
	FrequencyHopTables  []FrequencyHopTable
	FixedFrequencyTable *FixedFrequencyTable
}

// FrequencyHopTable is Parameter 147, FrequencyHopTable.
type FrequencyHopTable struct {
	HopTableID  uint8
	Frequencies []Kilohertz
}

// FixedFrequencyTable is Parameter 148, FixedFrequencyTable.
type FixedFrequencyTable struct {
	Frequencies []Kilohertz
}

// PerAntennaReceiveSensitivityRange is Parameter 149, PerAntennaReceiveSensitivityRange.
type PerAntennaReceiveSensitivityRange struct {
	AntennaID                  AntennaID
	ReceiveSensitivityIndexMin uint16
	ReceiveSensitivityIndexMax uint16
}

// ROSpec is Parameter 177, ROSpec.
//
// ROSpec is a Reader Operation Specification.
//
// An ROSpec describes the operations executed at one or more antennas, specified one or
// more AISpecs, RFSurveySpecs, or CustomSpecs. Specs are executed in the order in which
// they appear, and reports reference the relevant spec via a 1-indexed SpecIndex. Not all
// devices support RFSurveySpecs. LoopSpecs are only supported with LLRP version 1.1.
//
// The RFID device picks which ROSpec to execute based on a number of conditions
// (described below). When it does so, the ROSpec transitions from Inactive to Active, and
// the device may send an event notification (if configured to do so). While Active, if
// the ROSpec's reporting conditions are satisfied, the device sends ROAccessReports,
// which contain TagReportData matching either the device's configured defaults report
// information, or the TagReportContentSelector if the RO defines an ROReportSpec.
//
// The client defines an ROSpec via the AddROSpec Message. They must define the spec in
// the Disabled state, with an ROSpecID >0, or the device must reject it. Once defined,
// the client uses the ROSpecID to modify its state, and the device may include the
// ROSpecID in reports that reference it. Other relevant messages for controlling ROSpecs:
//
//   - Enable ROSpec
//
//   - Disable ROSpec
//
//   - Start ROSpec
//
//   - Stop ROSpec
//
//   - Delete ROSpec
//
//   - Get ROSpecs
type ROSpec struct {
	ROSpecID           uint32
	Priority           uint8
	ROSpecCurrentState ROSpecCurrentStateType
	ROBoundarySpec     ROBoundarySpec
	AISpecs            []AISpec
	RFSurveySpecs      []RFSurveySpec
	Custom             []Custom
	LoopSpec           *LoopSpec
	ROReportSpec       *ROReportSpec
}

// ROBoundarySpec is Parameter 178, ROBoundarySpec.
type ROBoundarySpec struct {
	StartTrigger ROSpecStartTrigger
	StopTrigger  ROSpecStopTrigger
}

// ROSpecStartTrigger is Parameter 179, ROSpecStartTrigger.
type ROSpecStartTrigger struct {
	Trigger         ROSpecStartTriggerType
	PeriodicTrigger *PeriodicTriggerValue
	GPITrigger      *GPITriggerValue
}

// PeriodicTriggerValue is Parameter 180, PeriodicTriggerValue.
type PeriodicTriggerValue struct {
	Offset       Millisecs32
	Period       Millisecs32
	UTCTimestamp *UTCTimestamp
}

// GPITriggerValue is Parameter 181, GPITriggerValue.
type GPITriggerValue struct {
	Port    uint16
	Event   bool
	Timeout Millisecs32
}

// ROSpecStopTrigger is Parameter 182, ROSpecStopTrigger.
type ROSpecStopTrigger struct {
	Trigger              ROSpecStopTriggerType
	DurationTriggerValue Millisecs32
	GPITriggerValue      *GPITriggerValue
}

// AISpec is Parameter 183, AISpec.
//
// AISpec defines antenna inventory operations, which LLRP defines as "the smallest unit
// of interaction between a Reader and tags in the antenna's field-of-view."
//
// An AISpec gives a list of InventoryParameterSpecs, which define how the RFID device
// should singulate tags. It combines this with an stop trigger and list of antennas. Each
// inventory spec is executed for each antenna, and the stop condition applies to the
// aggregate of these AI operations. The device chooses the order in which the operations
// are executed, regardless of the order presented.
type AISpec struct {
	// AntennaIDs tells the device which antennas to use. If any of them are zero, then
	// they're all used, regardless of any other value in the array.
	AntennaIDs              []AntennaID
	StopTrigger             AISpecStopTrigger
	InventoryParameterSpecs []InventoryParameterSpec
	Custom                  []Custom
}

// AISpecStopTrigger is Parameter 184, AISpecStopTrigger.
type AISpecStopTrigger struct {
	Trigger               AISpecStopTriggerType
	DurationTriggerValue  Millisecs32
	GPITrigger            *GPITriggerValue
	TagObservationTrigger *TagObservationTrigger
}

// TagObservationTrigger is Parameter 185, TagObservationTrigger.
type TagObservationTrigger struct {
	Trigger          TagObservationTriggerType
	NumberOfTags     uint16
	NumberOfAttempts uint16
	T                Millisecs16
	Timeout          Millisecs32
}

// InventoryParameterSpec is Parameter 186, InventoryParameterSpec.
type InventoryParameterSpec struct {
	InventoryParameterSpecID uint16
	AirProtocolID            AirProtocolIDType
	AntennaConfigurations    []AntennaConfiguration
	Custom                   []Custom
}

// RFSurveySpec is Parameter 187, RFSurveySpec.
type RFSurveySpec struct {
	AntennaID      AntennaID
	StartFrequency Kilohertz
	EndFrequency   Kilohertz
	Trigger        RFSurveySpecStopTrigger
	Custom         []Custom
}

// RFSurveySpecStopTrigger is Parameter 188, RFSurveySpecStopTrigger.
type RFSurveySpecStopTrigger struct {
	Trigger  RFSurveySpecStopTriggerType
	Duration Millisecs32
	N        Millisecs32
}

// AccessSpec is Parameter 207, AccessSpec.
type AccessSpec struct {
	AccessSpecID     uint32
	AntennaID        AntennaID
	AirProtocolID    AirProtocolIDType
	IsActive         bool
	ROSpecID         uint32
	Trigger          AccessSpecStopTrigger
	AccessCommand    AccessCommand
	AccessReportSpec *AccessReportSpec
	Custom           []Custom
}

// AccessSpecStopTrigger is Parameter 208, AccessSpecStopTrigger.
type AccessSpecStopTrigger struct {
	Trigger             AccessSpecStopTriggerType
	OperationCountValue uint16
}

// AccessCommand is Parameter 209, AccessCommand.
type AccessCommand struct {
	C1G2TagSpec                 C1G2TagSpec
	C1G2Read                    *C1G2Read
	C1G2Write                   *C1G2Write
	C1G2Kill                    *C1G2Kill
	C1G2Recommission            *C1G2Recommission
	C1G2Lock                    *C1G2Lock
	C1G2BlockErase              *C1G2BlockErase
	C1G2BlockWrite              *C1G2BlockWrite
	C1G2BlockPermalock          *C1G2BlockPermalock
	C1G2GetBlockPermalockStatus *C1G2GetBlockPermalockStatus
	ClientRequestOpSpec         *ClientRequestOpSpec
	Custom                      []Custom
}

// ClientRequestOpSpec is Parameter 210, ClientRequestOpSpec.
type ClientRequestOpSpec uint16

// ClientRequestResponse is Parameter 211, ClientRequestResponse.
type ClientRequestResponse struct {
	AccessSpecID                uint32
	EPCData                     EPCData
	C1G2Read                    *C1G2Read
	C1G2Write                   *C1G2Write
	C1G2Kill                    *C1G2Kill
	C1G2Recommission            *C1G2Recommission
	C1G2Lock                    *C1G2Lock
	C1G2BlockErase              *C1G2BlockErase
	C1G2BlockWrite              *C1G2BlockWrite
	C1G2BlockPermalock          *C1G2BlockPermalock
	C1G2GetBlockPermalockStatus *C1G2GetBlockPermalockStatus
	ClientRequestOpSpec         *ClientRequestOpSpec
	Custom                      *Custom
}

// LLRPConfigurationStateValue is Parameter 217, LLRPConfigurationStateValue.
type LLRPConfigurationStateValue uint32

// Identification is Parameter 218, Identification.
type Identification struct {
	IDType IDType
	// ReaderID is "unique within the local administration domain", and may be the reader's
	// MAC in EUI-64 format or an EPC.
	ReaderID []byte
}

// GPOWriteData is Parameter 219, GPOWriteData.
type GPOWriteData struct {
	Port uint16
	Data bool
}

// KeepAliveSpec is Parameter 220, KeepAliveSpec.
type KeepAliveSpec struct {
	Trigger  KeepAliveTriggerType
	Interval Millisecs32
}

// AntennaProperties is Parameter 221, AntennaProperties.
type AntennaProperties struct {
	AntennaConnected bool
	AntennaID        AntennaID
	// AntennaGain is the composite forward gain of the antenna, including cable loss,
	// relative a hypothetical isotropic antenna, expressed in 1/100ths of dBi.
	AntennaGain MillibelIsotropic
}

// AntennaConfiguration is Parameter 222, AntennaConfiguration.
type AntennaConfiguration struct {
	AntennaID            AntennaID
	RFReceiver           *RFReceiver
	RFTransmitter        *RFTransmitter
	C1G2InventoryCommand *C1G2InventoryCommand
	Custom               []Custom
}

// RFReceiver is Parameter 223, RFReceiver.
type RFReceiver uint16

// RFTransmitter is Parameter 224, RFTransmitter.
type RFTransmitter struct {
	// HopTableID for jurisdictions that require frequency hopping. Hop tables are presented
	// in the Reader's capabilities, under RegulatorCapabilities -> UHFBandCapabilities ->
	// C1G2RFModes.
	HopTableID uint16
	// ChannelIndex within the Fixed Frequency Table, for jurisdictions that do not permit
	// frequency hopping. The fixed frequency information is presented in the Reader's
	// capabilities, under RegulatoryCapabilities -> UHFBandCapabilities ->
	// FrequencyInformation. Unlike other tables, this table does not have entries with IDs;
	// instead, the ChannelIndex is the 1-based offset within the array.
	ChannelIndex uint16
	// TransmitPowerIndex, as from the for jurisdictions that do not permit frequency
	// hopping. The power levels are presented in the Reader's capabilities, under
	// RegulatoryCapabilities -> UHFBandCapabilities -> TransmitPowerLevels.
	TransmitPowerIndex uint16
}

// GPIPortCurrentState is Parameter 225, GPIPortCurrentState.
type GPIPortCurrentState struct {
	Port    uint16
	Enabled bool
	State   GPIStateType
}

// EventsAndReports is Parameter 226, EventsAndReports.
type EventsAndReports bool

// ROReportSpec is Parameter 237, ROReportSpec.
type ROReportSpec struct {
	Trigger                  ROReportTriggerType
	N                        uint16
	TagReportContentSelector TagReportContentSelector
	Custom                   []Custom
}

// TagReportContentSelector is Parameter 238, TagReportContentSelector.
type TagReportContentSelector struct {
	EnableROSpecID             bool
	EnableSpecIndex            bool
	EnableInventoryParamSpecID bool
	EnableAntennaID            bool
	EnableChannelIndex         bool
	EnablePeakRSSI             bool
	EnableFirstSeenTimestamp   bool
	EnableLastSeenTimestamp    bool
	EnableTagSeenCount         bool
	EnableAccessSpecID         bool
	C1G2EPCMemorySelector      *C1G2EPCMemorySelector
	Custom                     []Custom
}

// AccessReportSpec is Parameter 239, AccessReportSpec.
type AccessReportSpec AccessReportTriggerType

// TagReportData is Parameter 240, TagReportData.
type TagReportData struct {
	EPCData                                 EPCData
	EPC96                                   EPC96
	ROSpecID                                *ROSpecID
	SpecIndex                               *SpecIndex
	InventoryParameterSpecID                *InventoryParameterSpecID
	AntennaID                               *AntennaID
	PeakRSSI                                *PeakRSSI
	ChannelIndex                            *ChannelIndex
	FirstSeenUTC                            *FirstSeenUTC
	FirstSeenUptime                         *FirstSeenUptime
	LastSeenUTC                             *LastSeenUTC
	LastSeenUptime                          *LastSeenUptime
	TagSeenCount                            *TagSeenCount
	C1G2PC                                  *C1G2PC
	C1G2XPCW1                               *C1G2XPCW1
	C1G2XPCW2                               *C1G2XPCW2
	C1G2CRC                                 *C1G2CRC
	AccessSpecID                            *AccessSpecID
	C1G2ReadOpSpecResult                    *C1G2ReadOpSpecResult
	C1G2WriteOpSpecResult                   *C1G2WriteOpSpecResult
	C1G2KillOpSpecResult                    *C1G2KillOpSpecResult
	C1G2LockOpSpecResult                    *C1G2LockOpSpecResult
	C1G2BlockEraseOpSpecResult              *C1G2BlockEraseOpSpecResult
	C1G2BlockWriteOpSpecResult              *C1G2BlockWriteOpSpecResult
	C1G2RecommissionOpSpecResult            *C1G2RecommissionOpSpecResult
	C1G2BlockPermalockOpSpecResult          *C1G2BlockPermalockOpSpecResult
	C1G2GetBlockPermalockStatusOpSpecResult *C1G2GetBlockPermalockStatusOpSpecResult
	ClientRequestOpSpecResult               *ClientRequestOpSpecResult
	Custom                                  []Custom
}

// EPCData is Parameter 241, EPCData.
type EPCData struct {
	EPCNumBits uint16
	EPC        []byte
}

// RFSurveyReportData is Parameter 242, RFSurveyReportData.
type RFSurveyReportData struct {
	ROSpecID                  *ROSpecID
	SpecIndex                 *SpecIndex
	FrequencyRSSILevelEntries []FrequencyRSSILevelEntry
	Custom                    []Custom
}

// FrequencyRSSILevelEntry is Parameter 243, FrequencyRSSILevelEntry.
//
// RSSI stands for "received signal strength indicator" and is a measure of the amount of
// power in a received radio signal. RSSI will vary based on several factors, including
// distance to a tag, the tag's orientation in space, and environmental factors that
// change how radio signals propagate and interfere.
type FrequencyRSSILevelEntry struct {
	Frequency    Kilohertz
	Bandwidth    Kilohertz
	AverageRSSI  DecibelMilliwatt8
	PeakRSSI     DecibelMilliwatt8
	UTCTimestamp UTCTimestamp
	Uptime       Uptime
}

// ReaderEventNotificationSpec is Parameter 244, ReaderEventNotificationSpec.
type ReaderEventNotificationSpec struct {
	EventNotificationStates []EventNotificationState
}

// EventNotificationState is Parameter 245, EventNotificationState.
type EventNotificationState struct {
	ReaderEventType     ReaderEventType
	NotificationEnabled bool
}

// ReaderEventNotificationData is Parameter 246, ReaderEventNotificationData.
type ReaderEventNotificationData struct {
	UTCTimestamp                   UTCTimestamp
	Uptime                         Uptime
	HoppingEvent                   *HoppingEvent
	GPIEvent                       *GPIEvent
	ROSpecEvent                    *ROSpecEvent
	ReportBufferLevelWarningEvent  *ReportBufferLevelWarningEvent
	ReportBufferOverflowErrorEvent *ReportBufferOverflowErrorEvent
	ReaderExceptionEvent           *ReaderExceptionEvent
	RFSurveyEvent                  *RFSurveyEvent
	AISpecEvent                    *AISpecEvent
	AntennaEvent                   *AntennaEvent
	ConnectionAttemptEvent         *ConnectionAttemptEvent
	ConnectionCloseEvent           *ConnectionCloseEvent
	SpecLoopEvent                  *SpecLoopEvent
	Custom                         []Custom
}

// HoppingEvent is Parameter 247, HoppingEvent.
type HoppingEvent uint16

// GPIEvent is Parameter 248, GPIEvent.
//
// GPIEvent is sent when a GPI changes state. If it triggers an ROSpec to start or stop,
// it's sent before the ROSpecEvent parameter.
type GPIEvent struct {
	Port uint16
	// Event is the Reader-defined value of GPI that triggered the event.
	Event bool
}

// ROSpecEvent is Parameter 249, ROSpecEvent.
type ROSpecEvent struct {
	Event              ROSpecEventType
	ROSpecID           uint32
	PreemptingROSpecID uint32
}

// ReportBufferLevelWarningEvent is Parameter 250, ReportBufferLevelWarningEvent.
type ReportBufferLevelWarningEvent uint8

// ReportBufferOverflowErrorEvent is Parameter 251, ReportBufferOverflowErrorEvent.
type ReportBufferOverflowErrorEvent struct{}

// ReaderExceptionEvent is Parameter 252, ReaderExceptionEvent.
type ReaderExceptionEvent struct {
	Message                  string
	ROSpecID                 *ROSpecID
	SpecIndex                *SpecIndex
	InventoryParameterSpecID *InventoryParameterSpecID
	AntennaID                *AntennaID
	AccessSpecID             *AccessSpecID
	OpSpecID                 *OpSpecID
	Custom                   []Custom
}

// RFSurveyEvent is Parameter 253, RFSurveyEvent.
type RFSurveyEvent struct {
	Event    RFSurveyEventType
	ROSpecID uint32
}

// AISpecEvent is Parameter 254, AISpecEvent.
type AISpecEvent struct {
	Event              AISpecEventType
	ROSpecID           uint32
	SpecIndex          uint16
	SingulationDetails *C1G2SingulationDetails
}

// AntennaEvent is Parameter 255, AntennaEvent.
type AntennaEvent struct {
	Event     AntennaEventType
	AntennaID AntennaID
}

// ConnectionAttemptEvent is Parameter 256, ConnectionAttemptEvent.
type ConnectionAttemptEvent ConnectionAttemptEventType

// ConnectionCloseEvent is Parameter 257, ConnectionCloseEvent.
type ConnectionCloseEvent struct{}

// LLRPStatus is Parameter 287, LLRPStatus.
type LLRPStatus struct {
	Status           StatusCode
	ErrorDescription string
	FieldError       *FieldError
	ParameterError   *ParameterError
}

// FieldError is Parameter 288, FieldError.
type FieldError struct {
	FieldIndex uint16
	ErrorCode  StatusCode
}

// ParameterError is Parameter 289, ParameterError.
type ParameterError struct {
	ParameterType  ParamType
	ErrorCode      StatusCode
	ParameterError *ParameterError
	FieldError     *FieldError
}

// C1G2LLRPCapabilities is Parameter 327, C1G2LLRPCapabilities.
//
// This parameter reports the C1G2-specific capabilities supported.
type C1G2LLRPCapabilities struct {
	SupportsBlockErase         bool
	SupportsBlockWrite         bool
	SupportsBlockPermalock     bool
	SupportsTagRecommissioning bool
	SupportsUMIMethod2         bool
	SupportsXPC                bool
	// MaxSelectFiltersPerQuery can be 0 to indicate no maximum.
	MaxSelectFiltersPerQuery uint16
}

// UHFC1G2RFModeTable is Parameter 328, UHFC1G2RFModeTable.
//
// This carries the set of C1G2 RF modes the Reader can operate.
//
// The specific details of each parameter are defined in the EPC Gen-2 UHF RFID Standard,
// though small portions are of that information are given here for clarity.
//
// These settings dictate aspects of the physical communication between the reader and
// tags, and therefore directly impact the performance of their interaction. The best
// choices of parameters depends heavily on the physical environment in which the reader
// and tags are present.
//
// Each table entry has a ModeID which the client must reference to set the relevant
// operating parameters.
//
// "Tari" values used in these parameters is the "Type A Reference Interval", and while
// the details are more complicated, it can be thought of as how long it takes to transmit
// a 0-bit. The time it takes to transmit a 1-bit is somewhere between 1.5 and 2 Tari,
// depending on other parameters.
//
// In the broadest case, valid Tari values are 6.25-25 microseconds (i.e., 6250 to 25000
// nanoseconds), though it may be limited by the reader; in many cases, a client may pass
// 0 to allow the reader to select a valid in-range value.
//
// The tag uses the DivideRatio to calculate the backscatter link frequency (BLF), which
// itself is ultimately a multiple the of data rate. It may be one of two constants: 64/3
// or 8/1. Having different DivideRatios permits the same BLF with a different Tari value.
//
// The reader instructs the tags what type of subcarrier Modulation to use when encoding
// their backscattered reply. At FM0, the data rate in kBitsPerSec is approximately BLF in
// Kilohertz. Essentially, Miller values require 2, 4, or 8 times as many cycles as FM0,
// and so the data rate will be roughly 1/2, 1/4, or 1/8 BLF. Note that this does not
// affect whether the tags use ASK or PSK modulation; that's determined by the tag
// manufacturer.
//
// A vendor may have had these parameters certified by EPCglobal's Hardware Action Group's
// Testing and Conformance group, in which case the IsEPCHagConformant will be true.
type UHFC1G2RFModeTable struct {
	UHFC1G2RFModeTableEntries []UHFC1G2RFModeTableEntry
}

// UHFC1G2RFModeTableEntry is Parameter 329, UHFC1G2RFModeTableEntry.
//
// See UHFC1G2RFModelTable for more information.
type UHFC1G2RFModeTableEntry struct {
	// ModeID is used by the client when setting an RF mode parameter.
	ModeID                uint32
	DivideRatio           DivideRatio
	IsEPCHagConformant    bool
	Modulation            BackscatterMod
	ForwardLinkModulation FwdLinkMod
	SpectralMask          SpectralMaskType
	BackscatterDataRate   BitsPerSec
	// PIERatio is 1000x the the data-0 to data-1 symbol lengths ratio.
	PIERatio     uint32
	MinTariTime  Nanosecs32
	MaxTariTime  Nanosecs32
	StepTariTime Nanosecs32
}

// C1G2InventoryCommand is Parameter 330, C1G2InventoryCommand.
type C1G2InventoryCommand struct {
	TagInventoryStateAware bool
	Filters                []C1G2Filter
	RFControl              *C1G2RFControl
	SingulationControl     *C1G2SingulationControl
	Custom                 []Custom
}

// C1G2Filter is Parameter 331, C1G2Filter.
//
// Influences C1G2 Select commands sent before an Inventory round which can force tags'
// session flags into specific states. Note that as in the Gen2 standard, Truncate may
// only be set (action 2) in the final Filter and can only apply to the EPC memory bank.
//
// If the Reader supports tag-inventory-aware singulation, you can set the
// AwareFilterAction. If not, you can use the UnawareFilterAction.
type C1G2Filter struct {
	TruncateAction      C1G2FilterTruncateActionType
	TagInventoryMask    C1G2TagInventoryMask
	AwareFilterAction   *C1G2TagInventoryStateAwareFilterAction
	UnawareFilterAction *C1G2TagInventoryStateUnawareFilterAction
}

// C1G2TagInventoryMask is Parameter 332, C1G2TagInventoryMask.
//
// Mask data for the C1G2 Select command.
//
// LLRP uses a uint16 for the TagMask length, probably so that bit arrays are encoded
// consistently. Despite this, the Gen2 Select command uses an 8-bit mask length, so if
// your mask is longer than that, the Reader will either send more than one Select
// command, filter the data post-singulation, or do the wrong thing.
//
// For more predictable results with an unknown Reader, consider breaking long masks into
// two filters.
type C1G2TagInventoryMask struct {
	MemoryBank         C1G2MemoryBankType
	MostSignificantBit uint16
	TagMaskNumBits     uint16
	TagMask            []byte
}

// C1G2TagInventoryStateAwareFilterAction is Parameter 333,
// C1G2TagInventoryStateAwareFilterAction.
type C1G2TagInventoryStateAwareFilterAction struct {
	Target       C1G2TagInventoryTargetType
	FilterAction C1G2TagInventoryStateAwareFilterActionType
}

// C1G2TagInventoryStateUnawareFilterAction is Parameter 334,
// C1G2TagInventoryStateUnawareFilterAction.
type C1G2TagInventoryStateUnawareFilterAction C1G2TagInventoryStateUnawareFilterActionType

// C1G2RFControl is Parameter 335, C1G2RFControl.
type C1G2RFControl struct {
	// RFModeID must match one of the ModeIDs in the C1G2RFModes table that comes in the
	// UHFBandCapabilities (ParamType 144) section of the RegulatoryCapabilities (ParamType
	// 143) section of the GetReaderCapabilitiesResponse (MessageType 11)
	RFModeID uint16
	// Tari is "Type A Reference Interval", in nanoseconds. Typically, values must be
	// 6250-25000ns, though they may be restricted by the RFModes table. Usually, a client
	// can use 0 to allow the Reader to select a valid value.
	//
	// While the details are more complicated, the Tari duration is a basis for most other
	// protocol durations, so all else equal, a shorter Tari allows a higher bitrate, but
	// that's an gross oversimplification. For more information, see the EPC Class 1 Gen 2
	// standard and consult an RF engineer.
	Tari Nanosecs16
}

// C1G2SingulationControl is Parameter 336, C1G2SingulationControl.
type C1G2SingulationControl struct {
	// Session number for the inventory operation (0-3).
	Session C1G2SingulationSession
	// TagPopulation expected in the antenna's field of view.
	TagPopulation uint16
	// TagTransitTime is a measure of the expected tag mobility.
	TagTransitTime Millisecs32
	InvAwareAction *C1G2TagInventoryStateAwareSingulationAction
}

// C1G2TagInventoryStateAwareSingulationAction is Parameter 337,
// C1G2TagInventoryStateAwareSingulationAction.
type C1G2TagInventoryStateAwareSingulationAction struct {
	SessionState SessionState
	SLState      SLState
}

// C1G2TagSpec is Parameter 338, C1G2TagSpec.
type C1G2TagSpec struct {
	TagPattern1 C1G2TargetTag
	TagPattern2 *C1G2TargetTag
}

// C1G2TargetTag is Parameter 339, C1G2TargetTag.
type C1G2TargetTag struct {
	C1G2MemoryBank     C1G2MemoryBankType
	MatchFlag          bool
	MostSignificantBit uint16
	TagMaskNumBits     uint16
	TagMask            []byte
	TagDataNumBits     uint16
	TagData            []byte
}

// C1G2Read is Parameter 341, C1G2Read.
type C1G2Read struct {
	OpSpecID       uint16
	AccessPassword uint32
	C1G2MemoryBank C1G2MemoryBankType
	WordAddress    uint16
	WordCount      uint16
}

// C1G2Write is Parameter 342, C1G2Write.
type C1G2Write struct {
	OpSpecID       uint16
	AccessPassword uint32
	C1G2MemoryBank C1G2MemoryBankType
	WordAddress    uint16
	Data           []uint16
}

// C1G2Kill is Parameter 343, C1G2Kill.
type C1G2Kill struct {
	OpSpecID     uint16
	KillPassword uint32
}

// C1G2Lock is Parameter 344, C1G2Lock.
type C1G2Lock struct {
	OpSpecID         uint16
	AccessPassword   uint32
	C1G2LockPayloads []C1G2LockPayload
}

// C1G2LockPayload is Parameter 345, C1G2LockPayload.
type C1G2LockPayload struct {
	LockPrivilege LockPrivilegeType
	LockData      LockDataType
}

// C1G2BlockErase is Parameter 346, C1G2BlockErase.
type C1G2BlockErase struct {
	OpSpecID       uint16
	AccessPassword uint32
	C1G2MemoryBank C1G2MemoryBankType
	WordAddress    uint16
	WordCount      uint16
}

// C1G2BlockWrite is Parameter 347, C1G2BlockWrite.
type C1G2BlockWrite struct {
	OpSpecID       uint16
	AccessPassword uint32
	C1G2MemoryBank C1G2MemoryBankType
	WordAddress    uint16
	Data           []uint16
}

// C1G2EPCMemorySelector is Parameter 348, C1G2EPCMemorySelector.
type C1G2EPCMemorySelector struct {
	CRCEnabled     bool
	PCBitsEnabled  bool
	XPCBitsEnabled bool
}

// C1G2ReadOpSpecResult is Parameter 349, C1G2ReadOpSpecResult.
type C1G2ReadOpSpecResult struct {
	C1G2ReadOpSpecResultType C1G2ReadOpSpecResultType
	OpSpecID                 uint16
	Data                     []uint16
}

// C1G2WriteOpSpecResult is Parameter 350, C1G2WriteOpSpecResult.
type C1G2WriteOpSpecResult struct {
	C1G2WriteOpSpecResultType C1G2WriteOpSpecResultType
	OpSpecID                  uint16
	WordsWritten              uint16
}

// C1G2KillOpSpecResult is Parameter 351, C1G2KillOpSpecResult.
type C1G2KillOpSpecResult struct {
	C1G2KillResult C1G2KillResultType
	OpSpecID       uint16
}

// C1G2LockOpSpecResult is Parameter 352, C1G2LockOpSpecResult.
type C1G2LockOpSpecResult struct {
	C1G2LockResult C1G2LockResultType
	OpSpecID       uint16
}

// C1G2BlockEraseOpSpecResult is Parameter 353, C1G2BlockEraseOpSpecResult.
type C1G2BlockEraseOpSpecResult struct {
	C1G2BlockEraseResult C1G2BlockEraseResultType
	OpSpecID             uint16
}

// C1G2BlockWriteOpSpecResult is Parameter 354, C1G2BlockWriteOpSpecResult.
type C1G2BlockWriteOpSpecResult struct {
	C1G2BlockWriteResult C1G2BlockWriteResultType
	OpSpecID             uint16
	WordsWritten         uint16
}

// LoopSpec is Parameter 355, LoopSpec.
type LoopSpec uint32

// SpecLoopEvent is Parameter 356, SpecLoopEvent.
type SpecLoopEvent struct {
	ROSpecID  uint32
	LoopCount uint32
}

// C1G2Recommission is Parameter 357, C1G2Recommission.
type C1G2Recommission struct {
	OpSpecID     uint16
	KillPassword uint32
	SB3          bool
	SB2          bool
	LSB          bool
}

// C1G2BlockPermalock is Parameter 358, C1G2BlockPermalock.
type C1G2BlockPermalock struct {
	OpSpecID       uint16
	AccessPassword uint32
	C1G2MemoryBank C1G2MemoryBankType
	BlockAddress   uint16
	BlockMask      []uint16
}

// C1G2GetBlockPermalockStatus is Parameter 359, C1G2GetBlockPermalockStatus.
type C1G2GetBlockPermalockStatus struct {
	OpSpecID       uint16
	AccessPassword uint32
	C1G2MemoryBank C1G2MemoryBankType
	BlockAddress   uint16
	BlockRange     uint16
}

// C1G2RecommissionOpSpecResult is Parameter 360, C1G2RecommissionOpSpecResult.
type C1G2RecommissionOpSpecResult struct {
	C1G2RecommissionResult C1G2RecommissionResultType
	OpSpecID               uint16
}

// C1G2BlockPermalockOpSpecResult is Parameter 361, C1G2BlockPermalockOpSpecResult.
type C1G2BlockPermalockOpSpecResult struct {
	C1G2BlockPermalockResult C1G2BlockPermalockResultType
	OpSpecID                 uint16
}

// C1G2GetBlockPermalockStatusOpSpecResult is Parameter 362,
// C1G2GetBlockPermalockStatusOpSpecResult.
type C1G2GetBlockPermalockStatusOpSpecResult struct {
	C1G2GetBlockPermalockStatusResult C1G2GetBlockPermalockStatusResultType
	OpSpecID                          uint16
	// PermalockStatuses of each block requested.
	PermalockStatuses []uint16
}

// MaximumReceiveSensitivity is Parameter 363, MaximumReceiveSensitivity.
//
// MaximumReceiveSensitivity is the maximum receive sensitivity supported by the Reader.
// It's required if the Reader allows receive sensitivity control, but otherwise optional.
type MaximumReceiveSensitivity DecibelMilliwatt16

// RFSurveyFrequencyCapabilities is Parameter 365, RFSurveyFrequencyCapabilities.
type RFSurveyFrequencyCapabilities struct {
	MinFrequency Kilohertz
	MaxFrequency Kilohertz
}

// Custom is Parameter 1023, Custom.
type Custom struct {
	VendorID uint32
	Subtype  uint32
	Data     []byte
}
